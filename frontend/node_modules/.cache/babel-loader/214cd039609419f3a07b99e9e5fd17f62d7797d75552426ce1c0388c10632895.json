{"ast":null,"code":"var _jsxFileName = \"/Users/zahideaksak/Desktop/React/chat-app/frontend/src/context/ChatContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useState, useContext } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialValues = {\n  messages: [],\n  setMessages: () => {}\n};\nconst ChatContext = /*#__PURE__*/createContext(initialValues);\nexport const ChatProvider = ({\n  children\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const values = {\n    messages,\n    setMessages\n  };\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: values,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 10\n  }, this);\n};\n_s(ChatProvider, \"dxxfFX7fiXmC0h9Fk+B7I5VonqM=\");\n_c = ChatProvider;\nexport const useChat = () => {\n  _s2();\n  return useContext(ChatContext);\n};\n_s2(useChat, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["createContext","useState","useContext","jsxDEV","_jsxDEV","initialValues","messages","setMessages","ChatContext","ChatProvider","children","_s","values","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useChat","_s2","$RefreshReg$"],"sources":["/Users/zahideaksak/Desktop/React/chat-app/frontend/src/context/ChatContext.tsx"],"sourcesContent":["import { createContext, useState, ReactNode, useContext } from \"react\";\n\ninterface ChatProviderProps {\n  children: ReactNode;\n}\n\ninterface MessageData {\n  message: string;\n}\n\ninterface ChatContextData {\n  messages: MessageData[];\n  setMessages: React.Dispatch<React.SetStateAction<MessageData[]>>;\n}\n\nconst initialValues: ChatContextData = {\n  messages: [],\n  setMessages: (): void => {},\n};\n\nconst ChatContext: React.Context<ChatContextData> =\n  createContext<ChatContextData>(initialValues);\n\nexport const ChatProvider: React.FC<ChatProviderProps> = ({ children }) => {\n  const [messages, setMessages] = useState<MessageData[]>([]);\n  const values = {\n    messages,\n    setMessages,\n  };\n  return <ChatContext.Provider value={values}>{children}</ChatContext.Provider>;\n};\n\nexport const useChat = () => useContext(ChatContext);\n"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,QAAQ,EAAaC,UAAU,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAevE,MAAMC,aAA8B,GAAG;EACrCC,QAAQ,EAAE,EAAE;EACZC,WAAW,EAAEA,CAAA,KAAY,CAAC;AAC5B,CAAC;AAED,MAAMC,WAA2C,gBAC/CR,aAAa,CAAkBK,aAAa,CAAC;AAE/C,OAAO,MAAMI,YAAyC,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACzE,MAAM,CAACL,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAgB,EAAE,CAAC;EAC3D,MAAMW,MAAM,GAAG;IACbN,QAAQ;IACRC;EACF,CAAC;EACD,oBAAOH,OAAA,CAACI,WAAW,CAACK,QAAQ;IAACC,KAAK,EAAEF,MAAO;IAAAF,QAAA,EAAEA;EAAQ;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AAC/E,CAAC;AAACP,EAAA,CAPWF,YAAyC;AAAAU,EAAA,GAAzCV,YAAyC;AAStD,OAAO,MAAMW,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMnB,UAAU,CAACM,WAAW,CAAC;AAAA;AAACa,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}